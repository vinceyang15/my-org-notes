#+TITLE: Lists and Patterns
#+AUTHOR: Yang Xi

* Single-File Programs
  * ~List.Assoc~ module
    #+BEGIN_SRC ocaml
      let assoc = [("one", 1); ("two", 2); ("three", 3)];;
    #+END_SRC
    * ~List.Assoc.find~, looks up a key
      #+BEGIN_SRC ocaml
        List.Assoc.find assoc "two";;
      #+END_SRC
    * ~List.Assoc.add~, doesn't modify the original list
      #+BEGIN_SRC ocaml
        List.Assoc.add assoc "two" 4;;
      #+END_SRC
  * ~freq.ml~
    #+BEGIN_SRC ocaml
      open Core.Std

      let build_counts () =
        In_channel.fold_lines
          stdin
          ~init:[]
          ~f:(fun counts line ->
              let count =
                match List.Assoc.find counts line with
                | None -> 0
                | Some x -> x
              in
              List.Assoc.add counts line (count + 1)
             )

      let () =
        build_counts ()
        |> List.sort ~cmp:(fun (_,x) (_,y) -> Int.descending x y)
        |> (fun l -> List.take l 10)
        |> List.iter ~f:(fun (line,count) -> printf "%3d: %s\n" count line)
    #+END_SRC
    * ~let () =~ acts as *main* function
    * build, ~ocamlfind ocamlc -linkpkg -thread -package core freq.ml -o freq.byte~
      * /ocamlfind/, invokes other parsts of OCaml toolchain (/ocamlc/)
      * ~-linkpkg~, asks /ocamlfind/ to link packages
      * ~-thread~, turns on threading support

* Multifile Programs and Modules
  * ~counter.ml~
    #+BEGIN_SRC ocaml
      open Core.Std

      let touch t s =
        let count =
          match List.Assoc.find t s with
          | None -> 0
          | Some x -> x
        in
        List.Assoc.add t s (count + 1)
    #+END_SRC
    * ~counter.ml~, compiled int module ~Counter~
      * module name derived from filename
      * module name is alway *capitalized*

* Signatures and Abstract Types
  * /interface/, /signature/, /module type/, hide implementation details
    * ~filename.ml~ constrained by ~filename.mli~
  * ~val~ declaration: ~val <identifier> : <type>~
    * ~counter.ml~ signature:
      #+BEGIN_SRC ocaml
        open Core.Std

        val touch : (string * int) list -> string -> (string * int) list
      #+END_SRC
  * /abstract/ type, name is exposed in the interface, but not its definition
    #+BEGIN_SRC ocaml
      open Core.Std

      type t

      val empty : t

      val touch : t -> string -> t

      val to_list : t -> (string * int) list
    #+END_SRC
    * rewrite of ~counter.ml~
      #+BEGIN_SRC ocaml
        open Core.Std

        type t = (string * int) list

        let empty = []

        let to_list x = x

        let touch t s =
          let count =
            match List.Assoc.find t s with
            | None -> 0
            | Some x -> x
          in
          List.Assoc.add t s (count + 1)
      #+END_SRC
    * optimize ~Counter~, use ~Map~
      #+BEGIN_SRC ocaml
        open Core.Std

        type t = int String.Map.t

        let empty = String.Map.empty

        let to_list t = Map.to_list t

        let touch t s =
          let count =
            match Map.find t s with
            | None -> 0
            | Some x -> x
          in
          Map.add t ~key:s ~data:(count + 1)
      #+END_SRC

* Concrete Types in Signatures

* Nested Modules

* Opening Modules

* Including Modules

* Common Errors with Modules

** Type Mismatches

** Missing Definitions

** Type Definition Mismatches

** Cyclic Dependencies

* Designing with Modules

** Expose Concrete Types Rarely

** Design for the Call Site

** Create Uniform Interfaces

** Interfaces before Implementation
