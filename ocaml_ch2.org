* Variables and Functions
** Variables
   * start with ~[a-z_]~
   * ~let~ keyword
   * /scope/
     * top-level, ~let x = 3;;~
     * ~let <variable> = <expr1> in <expr2>~
       * evaluates /expr1/
       * evaluates /expr2/, with /variable/ bound to value of /expr1/
	 #+BEGIN_SRC ocaml
           let languages = "Ocaml,Perl,C++,C"
           let dashed_languages =
             let language_list = String.split languages ~on:',' in
             String.concat ~sep:"-" language_list
           ;;
	 #+END_SRC
     * /shadow/, ~let~ binding in an inner scope hide the definition from an outer scope
       #+BEGIN_SRC ocaml
         let languages = "Ocaml,Perl,C++,C"
         let dashed_languages =
           let languages = String.split languages on:',' in
           String.concat ~sep:"-" languages
         ;;
       #+END_SRC
   * nested ~let/in~ expression
     #+BEGIN_SRC ocaml
       let area_of_ring inner_radius outer_radius =
         let pi = acos (-1.) in
         let area_of_circle r= pi *. r *. r in
         area_of_circle outer_radius - area_of_circle inner_radius
       ;;
     #+END_SRC
   * ~let~ binding, *Immutable*

*** Pattern Matching and ~let~
    * /patterns/ on the lefthand side
      #+BEGIN_SRC ocaml
        let (ints,strings) = List.unzip [(1,"one"); (2,"two"); (3,"three")];;
      #+END_SRC
    * /irrefutable pattern/, any value of the type in question is guaranteed to match the pattern
      * *Tuple*, *Record*, irrefutable
      * *List* not irrefutable
        #+BEGIN_SRC ocaml
          let upcase_first_entry line =
            match String.split ~on:',' line with
            | [] -> assert false          (* String.split returns at least one element *)
            | first :: rest -> String.concat ~sep:"," (String.uppercase first :: rest)
          ;;
        #+END_SRC 

** Functions
*** Anonymous Functions
    * declaration
      #+BEGIN_SRC ocaml
        (fun x -> x + 1);;
      #+END_SRC
    * application
      #+BEGIN_SRC ocaml
        (fun x -> x + 1) 7;;
      #+END_SRC
    * pass to anotehr function
      #+BEGIN_SRC ocaml
        List.map ~f:(fun x -> x + 1) [1;2;3];;
      #+END_SRC
    * stuff into data structure
      #+BEGIN_SRC ocaml
        let increments = [ (fun x -> x + 1); (fun x -> x + 2) ] ;;
          
          List.map ~f:(fun g -> g 5) increments;;
      #+END_SRC
      * ~(fun g -> g 5)~ higher order function
        * takes a function as an argument
	* applies that function to number ~5~
    * return function from other function
      #+BEGIN_SRC ocaml
        let plusone = (fun x -> x + 1);;
          
          plusone 3;;
      #+END_SRC

*** Multiargument Functions
    * declaration
      #+NAME: normal abs_diff
      #+BEGIN_SRC ocaml
        let abs_diff x y = abs (x - y);;
      #+END_SRC
      * type: ~int -> int -> int~
    * /Currying/
      #+BEGIN_SRC ocaml
        let abs_diff =
          (fun x -> (fun y -> abs (x - y)));;
      #+END_SRC
      * type: ~int -> (int -> int)~
      * equivalent to <<normal abs_diff>>
    * /Partial Application/
      #+BEGIN_SRC ocaml
        let dist_from_3 = abs_diff 3;;

          dist_from_3 8;;
      #+END_SRC
    * /Currying/ anonymous function
      #+BEGIN_SRC ocaml
        let abs_diff = (fun x y -> abs (x - y));;
      #+END_SRC
    * use *Tuple* to write multiargument function
      #+BEGIN_SRC ocaml
        let abs_diff (x,y) = abs (x - y);;
          abs_diff (3,4);;
      #+END_SRC
      * type: ~int * int -> int = <fun>~

*** Recursive Functions
    * declaration, ~let rec~
      #+BEGIN_SRC ocaml
        let rec find_first_stutter list =
          match list with
          | [] | [_] ->
                  None
          | x :: y :: tl ->
             if x = y then Some x else find_first_stutter (y::tl)
        ;;      
      #+END_SRC
      * /or-pattern/, ~| [] | [_]~
    * ~let rec~ with ~and~, multiple mutually recursive values
      #+BEGIN_SRC ocaml
        let rec is_even x =
          if x = 0 then true else is_odd (x - 1)
        and is_odd x =
          if x = 0 then false else is_even (x - 1)
        ;;

          List.map ~f:is_even [0;1;2;3;4;5];;
          List.map ~f:is_odd [0;1;2;3;4;5];;
      #+END_SRC
    * distinguish between ~let~ and ~let rec~
      * type-inference algo, mutually recursive harder to reason

*** Prefix and Infix Operators
    #+BEGIN_SRC ocaml
      Int.max 3 4 (* prefix *);;
      3 + 4 (* infix *);;
      (+) 3 4 (* equivalent to 3 + 4 *);;
      List.map ~f:((+) 3) [4;5;6];;      
    #+END_SRC
    * function treated syntactically as an operator: 
      * ~! $ % & * + - . / : < = > ? @ ^ | ~~
      * ~or~
      * ~mod~
      * ~lsl~ "logical shift left"
    * define / redefine operator
      #+BEGIN_SRC ocaml
        let (+!) (x1,y1) (x2,y2) = (x1 + x2, y1 + y2);;
        (3,2) +! (-2,4);;
      #+END_SRC
    * ~*~, ~(***)~ reads as a _comment_, put spaces around any operator beginning and ending with ~*~
      #+BEGIN_SRC ocaml
        let ( *** ) x y = (x ** y) ** y;;
      #+END_SRC
    * Precedence and Associativity
      | Operator prefix                                      | Associativity      |
      |------------------------------------------------------+--------------------|
      | ~!...~, ~?...~, =~...=                               | Prefix             |
      | ~.~, ~.(~, ~.[~                                      | -                  |
      | function application, constructor, ~assert~, ~lazy~  | Left associative   |
      | ~-~, ~-.~                                            | Prefix             |
      | ~**...~, ~lsl~, ~lsr~, ~asr~                         | Right associative  |
      | ~*...~, ~/...~, ~%...~, ~mod~, ~land~, ~lor~, ~lxor~ | Left associative   |
      | ~+...~, ~-...~                                       | Left associative   |
      | ~::~                                                 | Right associative  |
      | ~@...~, ~^...~                                       | Right associative  |
      | ~=...~, ~<...~, ~>...~, ~&...~, ~$...~, ~\vert...~   | Left associative   |
      | ~&~, ~&&~                                            | Right associative  |
      | ~or~, ~\vert\vert~                                   | Right associative  |
      | ~,~                                                  | -                  |
      | ~<-~, ~:=~                                           | Right associative  |
      | ~if~                                                 | -                  |
      | ~;~                                                  | Right associcative |
      * special case:
        * =-=, =-.=, integer and floating-point subtraction
          1. *prefix*, negation
          2. *infix*, substraction
          3. negation has lower precedence than function application
             #+BEGIN_SRC ocaml
               Int.max 3 (-4);; (* wrap negative values in parentheses *)
	     #+END_SRC
    * sequencing operator =|>=
      #+BEGIN_SRC ocaml
        let (|>) x f = f x ;;
      #+END_SRC
      * usage
        #+BEGIN_SRC ocaml
          let path = "/usr/bin:/usr/local/bin:/bin:/sbin";;

            String.split ~on:':' path
            |> List.dedup ~compare:String.compare
            |> List.iter ~f:print_endline
            ;;
        #+END_SRC
        * partial application =List.iter ~f:print_endline=
        * works since =|>= is left associative
      * without =|>=
        #+BEGIN_SRC ocaml
          let split_path = String.split ~on:':' path in
              let deduped_path = List.dedup ~compare:String.compare split_path in
              List.iter ~f:print_endline deduped_path
          ;;
        #+END_SRC

*** Declaring Functions with =function=
    * =function=
      #+BEGIN_SRC ocaml -n
        let some_or_zero = function
          | Some x -> x
          | None -> 0
        ;;

          List.map ~f:some_or_zero [Some 3; None; Some 4];;
      #+END_SRC
      * type: ~int option -> int = <fun>~
      * equivalent to:
        #+BEGIN_SRC ocaml
          let some_or_zero num_opt =
            match num_opt with
            | Some x -> x
            | None -> 0
          ;;
        #+END_SRC
    * combined ith /curried/ function
      #+BEGIN_SRC ocaml
        let some_or_default default = function
          | Some x -> x
          | None -> default
        ;;

        some_or_default 3 (Some 5);;
      #+END_SRC
      * type: ~'a -> 'a option -> 'a = <fun>~

*** Labeled Arguments
    * identify a function argument by name
      #+BEGIN_SRC ocaml
        let ratio ~num ~denom = float num /. float denom;;

        ratio ~num:3 ~denom:10;;
      #+END_SRC
    * /label punning/, drop the text after =:=
      #+BEGIN_SRC ocaml
        let num = 3 in
            let denom = 4 in
            ratio ~num ~denom;;
      #+END_SRC

**** Higher-order functions and labels
     * higher-order function, order of labeled arguments matters

*** Optional Arguments
    * 
