#+TITLE: Lists and Patterns
#+AUTHOR: Yang Xi

* List Basics
  * *List*
    1. immutable, finite sequence
    2. element of the same type
  * Generating Lists, ~::~ notation
    #+BEGIN_SRC ocaml
      [1;2;3];;
      1 :: (2 :: (3 :: [])) ;;
      1 :: 2 :: 3 :: [] ;;
    #+END_SRCpp
    * ~::~ right associative
    * ~[]~ empty list, terminate a list
  * ~[]~, polymorphic
    #+BEGIN_SRC ocaml
      let empty = [];;

      3 :: empty;;
      "three" :: empty;;
    #+END_SRC

* Using Patterns to Extract Data from a List
  * Use ~match~ to read data
    #+BEGIN_SRC ocaml
      let rec sum l =
        match l with
        | [] -> 0
        | hd :: tl -> hd + sum tl
      ;;

        sum [1;2;3];;
        sum [];;
    #+END_SRC
  * ~match~, allows to name substructures within the data structure being matched
    * may lead to confusion
      #+BEGIN_SRC ocaml
        let rec drop_value l to_drop =
          match l with
          | [] -> []
          | to_drop :: tl -> drop_value tl to_drop
          | hd :: tl -> hd :: drop_value tl to_drop
        ;;
      #+END_SRC
      * ~to_drop :: tl -> drop_value tl to_drop~
        * doesn't mean a check that the first element equals ~to_drop~
        * causes a new variable ~to_drop~, bound to first element of list
        * use ordinary ~if~
          #+BEGIN_SRC ocaml
            let rec drop_value l to_drop =
              match l with
              | [] -> []
              | hd :: tl ->
                 let new_tl = drop_value tl to_drop in
                 if hd = to_drop then new_tl else hd :: new_tl
            ;;
          #+END_SRC

* Limitations (and Blessings) of Pattern Matching

** Performance
   * ~match~, machine code generated, will jump to the matched case directly
     #+BEGIN_SRC ocaml
       let plus_on_match x =
         match x with
         | 0 -> 1
         | 1 -> 2
         | 2 -> 3
         | _ -> x + 1

       let plus_one_if x =
         if x = 0 then 1
         else if x = 1 then 2
         else if x = 2 then 3
         else x + 1
       ;;
     #+END_SRC
     * ~plus_one_if~ is considerably slower
   * ~core_bench~ library, benchmarking
     #+BEGIN_SRC ocaml
       #require "core_bench";;
       open Core_bench.std;;

       let run_bench tests =
         Bench.bench
           ~ascii_table:true
           ~display:Textutils.Ascii_table.Display.column_titles
           tests
       ;;

         [ Bench.Test.create ~name:"plus_one_match" (fun () ->
                                                     ignore (plus_one_match 10))
         ; Bench.Test.create ~name:"plus_one_if" (fun() ->
                                                  ignore (plus_one_if 10)) ]
         |> run_bench
       ;;
     #+END_SRC
   * pattern matching more efficient, most of the time

** Detecting Errors
   * ~match~ capable of error-detecting
   * ~match~ checks exhaustiveness

* Using the List Module Effectively
  * ~List.map~
    * takes a list and a function for transforming elements
    * returns a new list with transformed elements
    #+BEGIN_SRC ocaml
      List.map ~f:String.length ["Hello"; "World"];;
    #+END_SRC
  * ~List.map2_exn~
    * takes two lists and a function for combining them
    * if length of one list differs from another, throw exception
    #+BEGIN_SRC ocaml
      List.map2_exn ~f:Int.max [1;2;3] [3;2;1];;
    #+END_SRC  
  * ~List.fold~
    * args: a list, initial accumulator value, function updating the accumulator
    #+BEGIN_SRC ocaml
      List.fold ~init:0 ~f:(+) [1;2;3;4];;
    #+END_SRC
    * reverse list
      #+BEGIN_SRC ocaml
        List.fold ~init:[] ~f:(fun list x -> x :: list) [1;2;3;4];;
      #+END_SRC

** More Useful List Functions
   * ~List.reduce~
   * ~List.filter~
   * ~List.filter_map~
   * ~List.partition_tf~
   * ~List.append~
     * ~@~ opeartor
     * ~List.concat~
    
* Tail Recursion

* Terser and Faster Patterns
