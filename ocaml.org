* Real World Ocaml - Chapter 1
** Calculator
   1. ~;;~ evaluate an expression
   2. function args, separated by spaces
   3. allows to place underscore in the middle of numeric literals
    #+BEGIN_SRC ocaml
    30_000_000 / 300_000;;
    #+END_SRC
   4. distinguish between ~float~ and ~int~ 
   5. ~let~ binding
    #+BEGIN_SRC ocaml
    let x = 4 + 3;;
    let y = x + x;;
    #+END_SRC
   6. *variables* start with [a-z_] by [a-zA-Z0-9_']

** Functions and Type Inference
  1. ~let~ define functions
     #+BEGIN_SRC ocaml
       let square x = x * x ;;
     #+END_SRC
     * first identifier after ~let~, function name
     * each subsequent, argument to function
     * ~int -> int~ function type, takes an ~int~ returns an ~int~
  2. function types
     + ~ratio~ :: type ~int -> int -> float~
       #+BEGIN_SRC ocaml
         let ratio x y =
           Float.of_int x /. Float.of_int y
         ;;
       #+END_SRC 

     + ~sum_if_true~ :: type ~(int -> bool) -> int -> int -> int~
       #+BEGIN_SRC ocaml
         let sum_if_true test first second =
           (if test first then first else 0)
           + (if test second then second else 0)
         ;;
       #+END_SRC

*** Type Inference
   * /type inference/ :: type of an expression inferred from the available type information about the component of the expression
   * explicit type annotation
     #+BEGIN_SRC ocaml
       let sum_if_true (test: int -> bool) (x : int) (y : int) : int =
         (if test x then x else 0)
         + (if test y then y else 0)
       ;;
     #+END_SRC

*** Inferring Generic Types
    * /Generic Type/ not enought information to determine the concrete type
      #+BEGIN_SRC ocaml
        let first_if_true text x y =
          if test x then x else y
        ;;
      #+END_SRC
      - ~('a -> bool) -> 'a -> 'a -> 'a~
      - /type variable/ ~'a~ type is generic,
      - /parametric polymorphism/ however three args of type ~'a~ must be the same

** Tuples, Lists, Options, and Pattern Matching

*** Tuples
    * ordered collection of values
    * values can be of different type
    #+BEGIN_SRC ocaml
      let a_tuple = (3,"three");;
      let another_tuple = (3,"four",5.);;
    #+END_SRC
    * *pattern matching* syntax, extract component
      #+BEGIN_SRC ocaml
        let (x,y) = a_tuple;;
      #+END_SRC
    * *pattern matching* in function arguments
      #+BEGIN_SRC ocaml
        let distance (x1,y1) (x2,y2) =
          sqrt ((x1 -. x2) ** 2. +. (y1 -. y2) ** 2.)
        ;;
      #+END_SRC
      - ~**~ raise a floating-point number to a power
      - type: ~float * float -> float * float -> float~, ~*~ corresponds to Cartesian product

*** Lists
    * hold any number of items
    * items must be of the same type, can't mix elements of different types
    * ~;~ separating list items
    #+BEGIN_SRC ocaml
      let languages = ["OCaml";"Perl";"C"];;
    #+END_SRC

**** ~List~ Module
     1. ~List.length~ :: compute the length of a list
        #+BEGIN_SRC ocaml
          List.length languages;;
        #+END_SRC
        - type: ~string list~
     3. ~List.map~ :: transform the elements of a list
        #+BEGIN_SRC ocaml
          List.map languages ~f:String.length;;
        #+END_SRC
	- /labeled argument/ ~~f~, specified by name rather than by position

**** ~::~ constructing lists
     - create a new and extended list
       #+BEGIN_SRC ocaml
         "French" :: "Spanish" :: languages;;
       #+END_SRC
     - bracket notation, syntatic sugar for ~::~
       #+BEGIN_SRC ocaml
         1 :: 2 :: 3 :: [];;
       #+END_SRC
     - ~@~ :: list concatenation operator
       #+BEGIN_SRC ocaml
         [1;2;3] @ [4;5;6]
       #+END_SRC
     
**** List patterns using match
     * based on ~[]~, ~::~
       #+BEGIN_SRC ocaml
         let my_favorite_language (my_favorite :: the_rest) =
           my_favorite
         ;;
       #+END_SRC
       - equivalent ~car~ and ~cdr~ in Scheme
       - pattern not exhaustive, (empty list will fail)
     * *Comments*, bounded in ~(* *)~

**** Recursive list functions
     #+BEGIN_SRC ocaml
       let rec sum l =
         match l with
         | [] -> 0
         | hd :: tl -> hd + sum tl
       ;;
     #+END_SRC
     * pattern matching, separate base case and inductive case

*** Options
    #+BEGIN_SRC ocaml
      let divide x y =
        if y = 0 then None else Some (x/y);;
    #+END_SRC
    * type: ~int -> int -> int option~
      * value may or may not be present
      * ~Some~, ~None~ constructors bulding optional values
    * pattern matching, to examine content of an option
      #+BEGIN_SRC ocaml
        let log_entry maybe_time message =
          let time =
            match maybe_time with
            | Some x -> x
            | None -> Time.now()
          in
          Time.to_sec_string ^ " .. " ^ message
        ;;
          log_entry (Some Time.epoch) "A long long time ago";;
          log_entry None "Up to the minute";;
      #+END_SRC
      * type: ~Time.t option -> string -> string~
      * ~^~ string concatenation
    * ~let~ ~in~
    * *STANDARD WAY* to encode a value that might not be there
    
** Records and Variants

*** /Record/
    #+BEGIN_SRC ocaml
      type point2d = { x : float; y : float };;
    #+END_SRC
    * contruct record type
      #+BEGIN_SRC ocaml
        let p = { x = 3. ; y = -4. };;
      #+END_SRC
    * access contents using pattern matching
      #+BEGIN_SRC ocaml
        let magnitude { x = x_pos; y = y_pos } =
          sqrt (x_pos ** 2. + y_pos ** 2.);;
      #+END_SRC
      * bind ~x_pos~ to ~x~
      * /field punning/
        #+BEGIN_SRC ocaml
          let magnitude { x; y } = sqrt (x ** 2. +. y ** 2.);;
        #+END_SRC
      * /dot notation/
        #+BEGIN_SRC ocaml
          let distance v1 v2 =
            magnitude { x = v1.x -. v2.x; y = v1.y -. v2.y };;
        #+END_SRC

*** /Variant/
    * declare /variant/
      #+BEGIN_SRC ocaml
        type circle_desc = { center: point2d; radius: float }
        type rect_des = { lower_left: point2d; width: float; height: float }
        type segment_desc = { endpoint1: point2d; endpoint2: point2d }

        type scene_element =
          | Circle of circle_desc
          | Rect of rect_desc
          | Segment of segment_desc
        ;;
      #+END_SRC
    * test /variant/ type
      #+BEGIN_SRC ocaml
        let is_inside_scene_element point scene_element =
          match scene_element with
          | Circle { center; radius } ->
             distance center point < radius
          | Rect { lower_left: width; height } ->
             point.x > lower_left.x && point.x < lower_left.x +. width
             && point.y > lower_left.y && point.y < lower_left.y +. height
          | Segment { endpoint1; endpoint2 } -> false


        let is_inside_scene point scene =
          List.exists scene
          -f:(fun el -> is_inside_scene_element point el)
        ;;
      #+END_SRC
      

** Imperative Programming

*** Arrays
    * declaration
      #+BEGIN_SRC ocaml
        let numbers = [| 1; 2; 3; 4 |];;
      #+END_SRC
    * modifying, index starts at 0, ~.(i)~ refer to element, ~<-~ modification
      #+BEGIN_SRC ocaml
        numbers.(2) <- 4;;
      #+END_SRC

*** Mutable Record Fields
    * declaration
      #+BEGIN_SRC ocaml
        type running_sum =
          {
            mutable sum: float;
            mutable sum_sq: float;
            mutable samples: int;
          }
        ;;
      #+END_SRC
    * ~create~, ~update~
      #+BEGIN_SRC ocaml
        let create () = { sum = 0.; sum_sq = 0.; samples = 0 }
        let update rsum x =
          rsum.samples <- rsum.samples + 1;
          rsum.sum <- rsum.sum +. x;
          rsum.sum_sq <- rsum.sum_sq +. x *. x

        let mean rsum = rsum.sum /. float rsum.samples
        let stdev rsum =
          sqrt (rsum.sum_sq /. float rsum.samples
                -. (rsum.sum /. float rsum.samples) ** 2.)
        ;;
      #+END_SRC

*** Refs
    * single mutable value, /record/ wih a single mutable field
    * declaration
      #+BEGIN_SRC ocaml
        let x = ref 0;;
      #+END_SRC
    * getter
      #+BEGIN_SRC ocaml
        !x
      #+END_SRC
    * setter
      #+BEGIN_SRC ocaml
        x := !x + 1;;
      #+END_SRC

*** For and While Loops
    * ~for~ loop
      #+BEGIN_SRC ocaml
        let permute array =
          let length = Array.length array in
          for i = 0 to length - 2 do
            let j = i + Random.int (length - i) in
            let tmp = array.(i) in
            array.(i) <- array.(j);
            array.(j) <- tmp
          done
        ;;
      #+END_SRC
    * ~while~ loop
      #+BEGIN_SRC ocaml
        let find_first_negative_entry array =
          let pos = ref 0 in
          while !pos < Array.length array && array.(!pos) >= 0 do
            pos := !pos + 1
          done;
          if !pos = Array.length array then None else Some !pos
        ;;
      #+END_SRC

