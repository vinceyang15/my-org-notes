* Real World Ocaml - Chapter 1
** Calculator
   1. ~;;~ evaluate an expression
   2. function args, separated by spaces
   3. allows to place underscore in the middle of numeric literals
    #+BEGIN_SRC ocaml
    30_000_000 / 300_000;;
    #+END_SRC
   4. distinguish between ~float~ and ~int~ 
   5. ~let~ binding
    #+BEGIN_SRC ocaml
    let x = 4 + 3;;
    let y = x + x;;
    #+END_SRC
   6. *variables* start with [a-z_] by [a-zA-Z0-9_']

** Functions and Type Inference
   1. ~let~ define functions
      #+BEGIN_SRC ocaml
        let square x = x * x ;;
      #+END_SRC
      - first identifier after ~let~, function name
      - each subsequent, argument to function
      - ~int -> int~ function type, takes an ~int~ returns an ~int~
   2. function types
      - ~ratio~ function
	#+BEGIN_SRC ocaml
          let ratio x y =
            Float.of_int x /. Float.of_int y
          ;;
	#+END_SRC

      - ~sum_if_true~

	#+BEGIN_SRC ocaml
          let sum_if_true test first second =
            (if test first then first else 0)
            + (if test second then second else 0)
          ;;
	#+END_SRC
*** Type Inference
    1. /type inference/ type of an expression inferred from the available type information about the component of the expression
   
